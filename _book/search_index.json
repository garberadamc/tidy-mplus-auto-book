[["index.html", "Tidy Workflow with MplusAutomation Chapter 1 Preface", " Tidy Workflow with MplusAutomation Adam Garber 2021-05-18 Chapter 1 Preface "],["intro.html", "Chapter 2 Introduction 2.1 Guidlines 2.2 Preparing to work with MplusAutomation 2.3 Tools we will use in lab 2.4 Creating an R-Project 2.5 install the “rhdf5” package to read gh5 files 2.6 load packages 2.7 Keyboard shortcuts 2.8 Read in data 2.9 View dataframe with labels &amp; response scale meta-data 2.10 Types of data for different tasks 2.11 Writing, reading, and converting data between 3 formats 2.12 Preparing column-names to be MplusAutomation ready 2.13 Renaming columns manually… 2.14 What do you do if you have a large dataset with many column names that are &gt; 8 characters? 2.15 A note on coding style:", " Chapter 2 Introduction 2.1 Guidlines guideline for MplusAutomation workflow create an R project in a dedicated project folder (on the desktop or in a class folder) install &amp; load packages read in data to R view data in R view metadata (from SPSS files) write .sav / .csv / .dat files fix character names to have less than 8 character filtering rows &amp; selecting columns change variable classes in R visualize and explore data introduction to mplusObjects 2.2 Preparing to work with MplusAutomation R PROJECTS: We will use R Projects for ALL labs &amp; assignments. This is because MplusAutomation involves specifying many filepaths. THE {here} package: To make filepaths unbreakable (reproducible) The same code will work across operating systems PROJECT SUB-FOLDERS: Thoughtfully organize files in sub-folders. This is critical, by the end of the quarter the number of Mplus files for an assignment will multiply rapidly LOCATION OF PROJECT FOLDERS: on desktop or within a single enclosing folder. There is a limitation with the “mplusObject” function due to the fact that Mplus only reads the first 90 columns in each line. e.g., if/your/filepath/has/many/nested/folders/it/will/be/longer/than/the/90character/limit/data.dat 2.3 Tools we will use in lab Tool/Package Purpose/Utility Advantages {MplusAutomation} package Current capabilities supporting full SEM modeling Flexibility (approaching infinite) R Project Unbreakable file paths &amp; neatness Reproducibility (kindness to your future self) {tidyverse} package Intuitive/descriptive function names Accessibility to new users {here} package Unbreakable/consistent file paths across OS Reproducibility (for Science’s sake!) {haven} package View-able metadata in R from SPSS datafiles Getting to know your measures {ggplot2} package Beautiful, customizable, reproducible figures Publication quality data visualizations pipe operator (%&gt;%) notation Ease of reading/writing scripts e.g., first() %&gt;% and_then() %&gt;% and_finally() 2.4 Creating an R-Project create a project folder (that will enclose all files associated with a given lab or assignment) the project folder should be located on the desktop or within a designated class folder each lab or assignment should have its own designated project folder create a new project (upper right hand corner of the R-studio window) create two sub-folders in the project folder, one called “data,” and one called “basic_mplus” 2.5 install the “rhdf5” package to read gh5 files if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;rhdf5&quot;) # how to install packages? install.packages(&quot;tidyverse&quot;) 2.6 load packages library(tidyverse) library(haven) library(here) library(MplusAutomation) library(rhdf5) library(reshape2) 2.7 Keyboard shortcuts ALT + DASH(-) = &lt;- SHIFT + CONTROL = %&gt;% 2.8 Read in data # object_name &lt;- function1(nested_function2(&quot;dataset_name.sav&quot;)) exp_data &lt;- read_spss(&quot;https://garberadamc.github.io/project-site/data/els_sub1_spss.sav&quot;) 2.9 View dataframe with labels &amp; response scale meta-data Note: Use the “print” option to save a PDF as a codebook of metadata. # the {haven} package keeps the meta-data from SPSS files # package_name::function_within_package() sjPlot::view_df(exp_data) 2.10 Types of data for different tasks SAV (e.g., spss_data.sav): this data format is for SPSS files &amp; contains variable labels (meta-data) CSV (e.g., r_ready_data.csv): this is the preferable data format for reading into R (no labels) DAT (e.g., mplus_data.dat): this is the data format used to read into Mplus (no column names or strings) NOTE: Mplus also accepts TXT formatted data (e.g., mplus_data.txt) 2.11 Writing, reading, and converting data between 3 formats Prepare datasets, remove SPSS labeling # write a CSV datafile (preferable format for reading into R, without labels) write_csv(exp_data, here(&quot;exp_lab1_data.csv&quot;)) # write a SPSS datafile (preferable format for reading into SPSS, labels are preserved) write_sav(exp_data, here(&quot;exp_lab1_data.sav&quot;)) # read the unlabeled data back into R nolabel_data &lt;- read_csv(here(&quot;exp_lab1_data.csv&quot;)) # write a DAT datafile (this function removes header row &amp; converts missing values to non-string) prepareMplusData(nolabel_data, here(&quot;exp_lab1_data.dat&quot;)) 2.12 Preparing column-names to be MplusAutomation ready Task: Make all variable names fit within the 8-character name limit (Mplus) while avoiding duplicates. 2.13 Renaming columns manually… # use function: rename(new_name = old_name) new_names &lt;- nolabel_data %&gt;% rename( school_motiv1 = item1 , school_motiv2 = item2 , school_motiv3 = item3 , school_comp1 = item4 , school_comp2 = item5 , school_comp3 = item6 , school_belif1 = item7 , school_belif2 = item8 , school_belif3 = item9 ) 2.14 What do you do if you have a large dataset with many column names that are &gt; 8 characters? first, remove all characters greater than 8 using str_sub() second, make sure you don’t now have duplicate variable names third, locate and change all duplicate names # remove characters from the variable names that are greater than 8 characters names(new_names) &lt;- str_sub(names(new_names), 1, 8) # check if culumn names are unique test.unique &lt;- function(df) { ## function to identify unique columns length1 &lt;- length(colnames(df)) length2 &lt;- length(unique(colnames(df))) if (length1 - length2 &gt; 0 ) { print(paste(&quot;There are&quot;, length1 - length2, &quot; duplicates&quot;, sep=&quot; &quot;)) } } test.unique(new_names) # locate duplicates (this will find the column of the first duplicate) anyDuplicated(colnames(new_names)) 2.15 A note on coding style: Naming conventions: Be consistent! I use the style lower snake case (e.g., this_is_lower_snake_case) Annotate code generously Let your code breath: use return often to spread code chunks out vertically (dense paragraphs of code are a headache to look at) "],["run-a-simple-model-with-mplusautomation.html", "Chapter 3 Run a Simple Model with MplusAutomation 3.1 A minimal example of writing, running, &amp; reading models 3.2 PRACTICE: Using MplusObject() method (type = BASIC;) 3.3 PRACTICE SUBSETTING: Now explore descriptives for observations that reported as “female” 3.4 PRACTICE: Exploratory Factor Analysis (EFA)", " Chapter 3 Run a Simple Model with MplusAutomation 3.1 A minimal example of writing, running, &amp; reading models What does the mplusObject() function do: It generates an Mplus input file (does not need full variable name list, its automated for you!) It generates a datafile specific to each model It runs or estimates the model (hopefully) producing the correct output. Always check! 3.2 PRACTICE: Using MplusObject() method (type = BASIC;) m_basic &lt;- mplusObject( TITLE = &quot;PRACTICE 01 - Explore TYPE = BASIC&quot;, VARIABLE = &quot;usevar= item1 item2 item3 item4 item5 item6 item7 item8 item9 female; ! use exclamation symbol to make comments, reminders, or annotations in Mplus files&quot;, ANALYSIS = &quot;type = basic; &quot;, usevariables = colnames(nolabel_data), rdata = nolabel_data) m_basic_fit &lt;- mplusModeler(m_basic, dataout=here(&quot;basic_mplus&quot;, &quot;basic_Lab1_DEMO.dat&quot;), modelout=here(&quot;basic_mplus&quot;, &quot;basic_Lab1_DEMO.inp&quot;), check=TRUE, run = TRUE, hashfilename = FALSE) 3.3 PRACTICE SUBSETTING: Now explore descriptives for observations that reported as “female” Add line of syntax: “useobs = female == 1;” fem_basic &lt;- mplusObject( TITLE = &quot;PRACTICE 02 - Explore female observations only&quot;, VARIABLE = &quot;usevar= item1 item2 item3 item4 item5 item6 item7 item8 item9; useobs = female == 1; !include observations that report female in analysis&quot;, ANALYSIS = &quot;type = basic;&quot;, usevariables = colnames(nolabel_data), rdata = nolabel_data) fem_basic_fit &lt;- mplusModeler(fem_basic, dataout=here(&quot;basic_mplus&quot;, &quot;fem_basic_Lab1_DEMO.dat&quot;), modelout=here(&quot;basic_mplus&quot;, &quot;fem_basic_Lab1_DEMO.inp&quot;), check=TRUE, run = TRUE, hashfilename = FALSE) 3.4 PRACTICE: Exploratory Factor Analysis (EFA) ## EXPLORATORY FACTOR ANALYSIS LAB DEMONSTRATION efa_demo &lt;- mplusObject( TITLE = &quot;EXPLORATORY FACTOR ANALYSIS - LAB DEMO&quot;, VARIABLE = &quot;usevar= item1 item2 item3 item4 item5 item6 item7 item8 item9;&quot; , ANALYSIS = &quot;type = efa 1 5; estimator = MLR; parallel=50;&quot;, MODEL = &quot;&quot; , PLOT = &quot;type = plot3;&quot;, OUTPUT = &quot;sampstat standardized residual modindices (3.84);&quot;, usevariables = colnames(nolabel_data), rdata = nolabel_data) efa_demo_fit &lt;- mplusModeler(efa_demo, dataout=here(&quot;basic_mplus&quot;, &quot;EFA_Lab_DEMO.dat&quot;), modelout=here(&quot;basic_mplus&quot;, &quot;EFA_Lab_DEMO.inp&quot;), check=TRUE, run = TRUE, hashfilename = FALSE) "],["exploratory-factor-analysis-efa.html", "Chapter 4 Exploratory Factor Analysis (EFA) 4.1 Preparation 4.2 Loading packages 4.3 EXERCISE 1: READ IN DATA TO R ENVIRONMENT 4.4 EXERCISE 2: SUBSET 4.5 EXERCISE 4: REVERSE CODE 4.6 EXERCISE 5: CHECK CORRELATIONS 4.7 EXERCISE 6: PREPARE DATASETS 4.8 EXERCISE 7: MPLUS AUTOMATION - GET DESCRIPTIVES 4.9 EXERCISE 8: EXPLORATORY FACTOR ANALYSIS (EFA) 4.10 References", " Chapter 4 Exploratory Factor Analysis (EFA) DATA SOURCE: This lab exercise utilizes the NCES public-use dataset: Education Longitudinal Study of 2002 (Lauff &amp; Ingels, 2014) \\(\\color{blue}{\\text{See website: nces.ed.gov}}\\) 4.1 Preparation R-Project Instructions: click “NEW PROJECT” (upper right corner of window) choose option “NEW DIRECTORY” choose location of project (on desktop OR in a designated class folder) Within R-studio under the Files pane (bottom right): click “New Folder” and name folder “data” click “New Folder” and name folder “efa_mplus” 4.2 Loading packages library(MplusAutomation) library(haven) library(rhdf5) library(tidyverse) library(here) library(corrplot) library(kableExtra) 4.3 EXERCISE 1: READ IN DATA TO R ENVIRONMENT lab_data &lt;- read_spss(&quot;https://garberadamc.github.io/project-site/data/els_sub1_spss.sav&quot;) 4.4 EXERCISE 2: SUBSET # make a subset of all the student reported variables by_student &lt;- lab_data %&gt;% select(22:145) # make another subset (just the variables we will use for the EFA) schl_safe &lt;- lab_data %&gt;% select( &quot;BYS20A&quot;, &quot;BYS20B&quot;, &quot;BYS20C&quot;, &quot;BYS20D&quot;, &quot;BYS20E&quot;, &quot;BYS20F&quot;, &quot;BYS20G&quot;, # F1 &quot;BYS20H&quot;, &quot;BYS20I&quot;, &quot;BYS20J&quot;, &quot;BYS20K&quot;, &quot;BYS20L&quot;, &quot;BYS20M&quot;, &quot;BYS20N&quot;, # F2 &quot;BYS21A&quot;, &quot;BYS21B&quot;, &quot;BYS21C&quot;, &quot;BYS21D&quot;, &quot;BYS21E&quot;, # F3 &quot;BYSEX&quot;, &quot;BYRACE&quot;, &quot;BYSTLANG&quot; # add some covariates or grouping variables ) 4.5 EXERCISE 4: REVERSE CODE Reverse indicators so scale has consistent meaning for factor interpretation Expected factors based on item wording: Factor 1: “school climate,” higher values indicate postive school climate Factor 2: “safety,” higher values indicate safe school conditions Factor 3: “clear rules,” higher values indicate clear communication of rules # Reverse code the following variables: cols = c(&quot;BYS20A&quot;, &quot;BYS20B&quot;, &quot;BYS20C&quot;, # FACTOR 1: school climate &quot;BYS20E&quot;, &quot;BYS20F&quot;, &quot;BYS20G&quot;, &quot;BYS21A&quot;, &quot;BYS21B&quot;, &quot;BYS21C&quot;, &quot;BYS21D&quot;, &quot;BYS21E&quot;) # FACTOR 3: clear rules # the number &quot;5&quot; will change: Use &quot;number of categories&quot; + 1 (e.g., 4 + 1) schl_safe[ ,cols] &lt;- 5 - schl_safe[ ,cols] 4.6 EXERCISE 5: CHECK CORRELATIONS 4.6.1 check correlations to see if coding was correct (all blue, no red) f1_cor &lt;- cor(schl_safe[1:7], use = &quot;pairwise.complete.obs&quot;) f2_cor &lt;- cor(schl_safe[8:14], use = &quot;pairwise.complete.obs&quot;) f3_cor &lt;- cor(schl_safe[15:19], use = &quot;pairwise.complete.obs&quot;) corrplot(f1_cor, method = &quot;circle&quot;, type = &quot;upper&quot;) corrplot(f2_cor, method = &quot;circle&quot;, type = &quot;upper&quot;) corrplot(f3_cor, method = &quot;circle&quot;, type = &quot;upper&quot;) # Discovering patterns in large correlation matrices: The correlation matrix can # be reordered according to the correlation coefficient. This is useful for # identifying the hidden structure and pattern in the matrix. “hclust” for # hierarchical clustering can be used... # Add the argument: order=&#39;hclust&#39; 4.7 EXERCISE 6: PREPARE DATASETS ### prepare datasets, remove SPSS labeling # write a CSV datafile (preferable format for reading into R, without labels) write_csv(schl_safe, here(&quot;data&quot;, &quot;els_fa_ready_sub2.csv&quot;)) # write a SPSS datafile (preferable format for reading into SPSS, labels are # preserved) write_sav(schl_safe, here(&quot;data&quot;, &quot;els_fa_ready_sub2.sav&quot;)) # read the unlabeled data back into R fa_data &lt;- read_csv(here(&quot;data&quot;, &quot;els_fa_ready_sub2.csv&quot;)) # write an Mplus DAT datafile prepareMplusData(fa_data, here(&quot;data&quot;, &quot;els_fa_ready_sub2.dat&quot;)) 4.8 EXERCISE 7: MPLUS AUTOMATION - GET DESCRIPTIVES ## TYPE = BASIC ANALYSIS (indicators: school climate, safety, clear rules ) m_basic &lt;- mplusObject( TITLE = &quot;RUN TYPE = BASIC ANALYSIS - LAB 2 DEMO&quot;, VARIABLE = &quot; ! an mplusObject() will always need a &#39;usevar&#39; statement ! ONLY specify variables to use in analysis ! lines of code in MPLUS ALWAYS end with a semicolon &#39;;&#39; usevar = BYS20A BYS20B BYS20C BYS20D BYS20E BYS20F BYS20G BYS20H BYS20I BYS20J BYS20K BYS20L BYS20M BYS20N BYS21A BYS21B BYS21C BYS21D BYS21E;&quot;, ANALYSIS = &quot;type = basic&quot; , MODEL = &quot;&quot; , PLOT = &quot;&quot;, OUTPUT = &quot;&quot;, usevariables = colnames(fa_data), # tell MplusAutomation the column names to use rdata = fa_data) # this is the data object used (must be un-label) m_basic_fit &lt;- mplusModeler(m_basic, dataout=here(&quot;efa_mplus&quot;, &quot;basic_Lab2_DEMO.dat&quot;), modelout=here(&quot;efa_mplus&quot;, &quot;basic_Lab2_DEMO.inp&quot;), check=TRUE, run = TRUE, hashfilename = FALSE) ## END: TYPE = BASIC ANALYSIS 4.9 EXERCISE 8: EXPLORATORY FACTOR ANALYSIS (EFA) ## EXPLORATORY FACTOR ANALYSIS: (indicators: school climate, safety, clear rules) m_efa_1 &lt;- mplusObject( TITLE = &quot;FACTOR ANALYSIS EFA - LAB 2 DEMO&quot;, VARIABLE = &quot;usevar = BYS20A BYS20B BYS20C BYS20D BYS20E BYS20F BYS20G BYS20H BYS20I BYS20J BYS20K BYS20L BYS20M BYS20N BYS21A BYS21B BYS21C BYS21D BYS21E;&quot;, ANALYSIS = &quot;type = efa 1 5; ! run efa of 1 through 5 factor models estimator = MLR; ! using the ROBUST ML Estimator parallel=50; ! run the parallel analysis for viewing in elbow plotå &quot;, MODEL = &quot;&quot; , PLOT = &quot;type = plot3;&quot;, OUTPUT = &quot;sampstat standardized residual modindices (3.84);&quot;, usevariables = colnames(fa_data), rdata = fa_data) m_efa_1_fit &lt;- mplusModeler(m_efa_1, dataout=here(&quot;efa_mplus&quot;, &quot;EFA1_Lab2_DEMO.dat&quot;), modelout=here(&quot;efa_mplus&quot;, &quot;EFA1_Lab2_DEMO.inp&quot;), check=TRUE, run = TRUE, hashfilename = FALSE) ## END: EXPLORATORY FACTOR ANALYSIS 4.9.1 EXERCISE 9: EFA REDUCED INDICATOR SET 4.9.2 Removed items: (loadings &lt;.5 and/or cross-loadings) 4.9.2.1 How to make a tribble table? lab_tools &lt;- tribble( ~&quot;Items&quot;, ~&quot;Factor 1&quot;, ~&quot;Factor 2&quot;, ~&quot;Factor 3&quot;, #----------|-------------|------------|-----------|, &quot;BYS20C&quot; , &quot; 0.149 &quot; , &quot;0.168*&quot; , &quot;0.120 &quot; , &quot;BYS20D&quot; , &quot; 0.075 &quot; , &quot;0.338*&quot; , &quot;0.082 &quot; , &quot;BYS20H&quot; , &quot; 0.345*&quot; , &quot;0.307*&quot; , &quot;0.061 &quot; , &quot;BYS20I&quot; , &quot;-0.032 &quot; , &quot;0.386*&quot; , &quot;0.167 &quot; , &quot;BYS20L&quot; , &quot; 0.004 &quot; , &quot;0.400*&quot; , &quot;0.377*&quot; , &quot;BYS21B&quot; , &quot; 0.418*&quot; , &quot;0.024 &quot; , &quot;0.187*&quot; , ) lab_tools %&gt;% kable(booktabs = T, linesep = &quot;&quot;) %&gt;% kable_styling(latex_options = c(&quot;striped&quot;), full_width = F, position = &quot;left&quot;) Items Factor 1 Factor 2 Factor 3 BYS20C 0.149 0.168* 0.120 BYS20D 0.075 0.338* 0.082 BYS20H 0.345* 0.307* 0.061 BYS20I -0.032 0.386* 0.167 BYS20L 0.004 0.400* 0.377* BYS21B 0.418* 0.024 0.187* ## EXPLORATORY FACTOR ANALYSIS - REDUCED SET m.step1 &lt;- mplusObject( TITLE = &quot;FACTOR ANALYSIS EFA - REDUCED SET - LAB 2 DEMO&quot;, VARIABLE = &quot;usevar = BYS20A BYS20B BYS20E BYS20F BYS20G ! removed: BYS20C BYS20D BYS20J BYS20K BYS20M BYS20N ! removed:BYS20H BYS20I BYS20L BYS21A BYS21C BYS21D BYS21E ! removed: BYS21B ;&quot;, ANALYSIS = &quot;type = efa 1 5; ! run efa of 1 through 5 factor models estimator = MLR; ! using the ROBUST ML Estimator parallel=50; ! run the parallel analysis for viewing in elbow plot &quot;, MODEL = &quot;&quot; , PLOT = &quot;type = plot3;&quot;, OUTPUT = &quot;sampstat standardized residual modindices (3.84);&quot;, usevariables = colnames(fa_data), rdata = fa_data) m.step1.fit &lt;- mplusModeler(m.step1, dataout=here(&quot;efa_mplus&quot;, &quot;EFA2_Lab1_DEMO.dat&quot;), modelout=here(&quot;efa_mplus&quot;, &quot;EFA2_Lab1_DEMO.inp&quot;), check=TRUE, run = TRUE, hashfilename = FALSE) ## END: EXPLORATORY FACTOR ANALYSIS OF - REDUCED SET 4.10 References Hallquist, M. N., &amp; Wiley, J. F. (2018). MplusAutomation: An R Package for Facilitating Large-Scale Latent Variable Analyses in Mplus. Structural equation modeling: a multidisciplinary journal, 25(4), 621-638. Horst, A. (2020). Course &amp; Workshop Materials. GitHub Repositories, https://https://allisonhorst.github.io/ Muthén, L.K. and Muthén, B.O. (1998-2017). Mplus User’s Guide. Eighth Edition. Los Angeles, CA: Muthén &amp; Muthén R Core Team (2017). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL http://www.R-project.org/ Wickham et al., (2019). Welcome to the tidyverse. Journal of Open Source Software, 4(43), 1686, https://doi.org/10.21105/joss.01686 "],["splits-iterators.html", "Chapter 5 Splits &amp; Iterators 5.1 Begin", " Chapter 5 Splits &amp; Iterators 5.0.1 Lab 4 outline Randomly split data into 2 equal parts (calibration &amp; validation samples) Introduction to MplusAutomation with iterators Dealing with large data 5.0.2 Getting started - following the routine… Create an R-Project Install packages (\\(\\color{red}{\\text{ONLY IF NEEDED}}\\)) Load packages 5.0.3 R-Project instructions: click “NEW PROJECT” (upper right corner of window) choose option “NEW DIRECTORY” choose location of project (on desktop OR in a designated class folder) Within R-studio under the files pane (bottom right): click “New Folder” and name folder “data” click “New Folder” and name folder “efa_mplus” click “New Folder” and name folder “figures” New packages this week: {janitor} {haven} 5.1 Begin DATA SOURCE: This lab exercise utilizes the NCES public-use dataset: Education Longitudinal Study of 2002 (Lauff &amp; Ingels, 2014) \\(\\color{blue}{\\text{See website: nces.ed.gov}}\\) 5.1.1 loading packages… library(janitor) library(tidyverse) library(haven) library(MplusAutomation) library(rhdf5) library(here) library(corrplot) 5.1.2 read in the raw dataset lab_data &lt;- read_spss(&quot;https://garberadamc.github.io/project-site/data/els_sub1_spss.sav&quot;) 5.1.3 create a subset of the dataset called school_trouble school_trouble &lt;- lab_data %&gt;% select(41:55) 5.1.4 make a new codebook from the school_trouble subset sjPlot::view_df(school_trouble) 5.1.5 write a CSV datafile write_csv(school_trouble, here(&quot;data&quot;, &quot;school_trouble_data.csv&quot;)) 5.1.6 read the unlabeled data back into R trouble_data &lt;- read_csv(here(&quot;data&quot;, &quot;school_trouble_data.csv&quot;)) 5.1.7 check items to see if reverse coding is needed cor_matrix &lt;- cor(trouble_data, use = &quot;pairwise.complete.obs&quot;) corrplot(cor_matrix, method=&quot;circle&quot;, type = &quot;upper&quot;) "],["section.html", "Chapter 6 6.1 Randomly split a sample into 2 equal parts", " Chapter 6 6.1 Randomly split a sample into 2 equal parts "],["section-1.html", "Chapter 7 7.1 Introduction to MplusAutomation with iterators 7.2 Cleaning &amp; subsetting large datasets 7.3 End of lab 4 exercise 7.4 References", " Chapter 7 7.0.1 find the size of half of original sample. 7.0.2 The “floor()” function helps with rounding smp_size &lt;- floor(0.50 * nrow(trouble_data)) 7.0.3 set the seed to make your partition reproducible set.seed(123) 7.0.4 the function sample() will pick at random the values of the specified number calibrate_smp &lt;- sample(seq_len(nrow(trouble_data)), size = smp_size) 7.0.5 create two samples called “calibrate” &amp; “validate” calibrate &lt;- trouble_data[calibrate_smp, ] validate &lt;- trouble_data[-calibrate_smp, ] 7.0.6 Let’s run an EFA with the “calibrate” sample m_efa_1 &lt;- mplusObject( TITLE = &quot;School Trouble EFA - LAB 4 DEMO&quot;, VARIABLE = &quot;usevar = BYS22A-BYS24G;&quot;, ANALYSIS = &quot;type = efa 1 5; estimator = mlr; parallel=50; ! run parallel analysis&quot;, MODEL = &quot;&quot; , PLOT = &quot;type = plot3;&quot;, OUTPUT = &quot;sampstat;&quot;, usevariables = colnames(calibrate), rdata = calibrate) m_efa_1_fit &lt;- mplusModeler(m_efa_1, dataout=here(&quot;efa_mplus&quot;, &quot;lab4_efa1_trouble.dat&quot;), modelout=here(&quot;efa_mplus&quot;, &quot;lab4_efa1_trouble.inp&quot;), check=TRUE, run = TRUE, hashfilename = FALSE) 7.0.7 Plot Parallel Analysis &amp; Eigenvalues 7.0.8 read into R an Mplus output file efa_summary &lt;- readModels(here(&quot;efa_mplus&quot;, &quot;lab4_efa1_trouble.out&quot;)) 7.0.9 extract relavent data &amp; prepare dataframe for plot x &lt;- list(EFA=efa_summary[[&quot;gh5&quot;]][[&quot;efa&quot;]][[&quot;eigenvalues&quot;]], Parallel=efa_summary[[&quot;gh5&quot;]][[&quot;efa&quot;]][[&quot;parallel_average&quot;]]) plot_data &lt;- as_data_frame(x) plot_data &lt;- cbind(Factor = paste0(1:nrow(plot_data)), plot_data) plot_data &lt;- plot_data %&gt;% mutate(Factor = fct_inorder(Factor)) 7.0.10 pivot the dataframe to “long” format plot_data_long &lt;- plot_data %&gt;% pivot_longer(EFA:Parallel, # The columns I&#39;m gathering together names_to = &quot;Analysis&quot;, # new column name for existing names values_to = &quot;Eigenvalues&quot;) # new column name to store values 7.0.11 plot using ggplot plot_data_long %&gt;% ggplot(aes(y=Eigenvalues, x=Factor, group=Analysis, color=Analysis)) + geom_point() + geom_line() + theme_minimal() 7.0.12 save figure to the designated folder ggsave(here(&quot;figures&quot;, &quot;eigenvalue_elbow_rplot.png&quot;), dpi=300, height=5, width=7, units=&quot;in&quot;) 7.1 Introduction to MplusAutomation with iterators 7.1.1 Alternate way to run an EFA with the “calibrate” sample m_efa &lt;- lapply(1:5, function(k) { m_efa2 &lt;- mplusObject( TITLE = &quot;School Trouble EFA - LAB 4 DEMO&quot;, VARIABLE = &quot;usevar = BYS22A-BYS24G;&quot;, ANALYSIS = paste(&quot;type=efa&quot;, k, k), MODEL = &quot;&quot; , PLOT = &quot;type = plot3;&quot;, OUTPUT = &quot;sampstat;&quot;, usevariables = colnames(calibrate), rdata = calibrate) m_efa_2_fit &lt;- mplusModeler(m_efa2, dataout=sprintf(here(&quot;efa_mplus2&quot;, &quot;efa_trouble.dat&quot;), k), modelout=sprintf(here(&quot;efa_mplus2&quot;, &quot;efa_%d_trouble.inp&quot;), k), check=TRUE, run = TRUE, hashfilename = FALSE) }) 7.2 Cleaning &amp; subsetting large datasets 7.2.1 reading SPSS files is a lot slower than reading CSV formatted files hsls_raw &lt;- read_spss(here(&quot;data&quot;, &quot;hsls_16_student_sub_v1.sav&quot;)) 7.2.2 make all column names “lower_snake_case” style hsls_tidy &lt;- hsls_raw %&gt;% clean_names() 7.2.3 select usig the starts_with() function hsls_x1 &lt;- hsls_tidy %&gt;% select(starts_with(&quot;x1&quot;)) # columns with first 2 characters &quot;x1&quot; 7.2.4 select using the end_with() function hsls_not_sex &lt;- hsls_tidy %&gt;% select(!ends_with(&quot;sex&quot;)) # columns that do NOT end with &quot;sex&quot; 7.2.5 select using the end_with() function hsls_science &lt;- hsls_tidy %&gt;% select(contains(&quot;sci&quot;)) # columns that contain characters &quot;sci&quot; hsls_math &lt;- hsls_tidy %&gt;% select(contains(c(&quot;mth&quot; , &quot;math&quot;))) # columns that contain &quot;mth&quot; or &quot;math&quot; 7.2.6 combine different select() arguements hsls_math_sci &lt;- hsls_tidy %&gt;% select(contains(c(&quot;mth&quot; , &quot;math&quot;, &quot;sci&quot;))) %&gt;% select(!starts_with(&quot;x1&quot;)) %&gt;% select(!ends_with(&quot;sex&quot;)) 7.2.7 remove characters from the variable names that are greater than 8 characters names(hsls_math_sci) = str_sub(names(hsls_math_sci), 1, 8) 7.2.8 check if culumn names are unique test.unique &lt;- function(df) { ## function to identify unique columns length1 &lt;- length(colnames(df)) length2 &lt;- length(unique(colnames(df))) if (length1 - length2 &gt; 0 ) { print(paste(&quot;There are&quot;, length1 - length2, &quot; duplicates&quot;, sep=&quot; &quot;)) } } test.unique(hsls_math_sci) 7.2.9 locate duplicates (this will find the column of the first duplicate) anyDuplicated(colnames(hsls_math_sci)) names(hsls_math_sci) 7.2.10 Other functions to consider from the “stringr” package (part of tidyverse): str_remove() str_replace() # replace one string pattern with another str_match() str_pad() # to remove spaces str_count() str_detect() str_dup() str_extract_all() 7.3 End of lab 4 exercise 7.4 References Hallquist, M. N., &amp; Wiley, J. F. (2018). MplusAutomation: An R Package for Facilitating Large-Scale Latent Variable Analyses in Mplus. Structural equation modeling: a multidisciplinary journal, 25(4), 621-638. Horst, A. (2020). Course &amp; Workshop Materials. GitHub Repositories, https://https://allisonhorst.github.io/ Muthén, L.K. and Muthén, B.O. (1998-2017). Mplus User’s Guide. Eighth Edition. Los Angeles, CA: Muthén &amp; Muthén R Core Team (2017). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL http://www.R-project.org/ Wickham et al., (2019). Welcome to the tidyverse. Journal of Open Source Software, 4(43), 1686, https://doi.org/10.21105/joss.01686 "],["final-words.html", "Chapter 8 Final Words", " Chapter 8 Final Words We have finished a nice book. "],["references-2.html", "References", " References "]]
